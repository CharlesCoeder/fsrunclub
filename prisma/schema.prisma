generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model: Represents both regular users and instructors
// Stores user authentication info, profile details, and relations to runs and rewards
model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  password        String
  image           String?
  role            Role            @default(USER)
  bio             String?         // For instructor profiles
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userRewards     UserReward[]    // Tracks rewards earned by the user
  accounts        Account[]       // For potential multi-provider auth
  sessions        Session[]       // Manages user sessions
  participatedRuns UserRun[]      // Tracks runs the user has participated in
  instructedRuns  RunInstructor[] // Tracks runs led by the instructor (if role is INSTRUCTOR)
}

// Run model: Represents a scheduled run event
// Stores details about the run, including date, time, pace, and distance
model Run {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  time           String
  pace           String
  distance       Float
  route          String?
  meetupLocation String?
  qrCode         String          @unique // For attendance tracking
  instructors    RunInstructor[] // Links to instructors leading this run
  participants   UserRun[]       // Links to users participating in this run
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// RunInstructor model: Manages the many-to-many relationship between instructors and runs
// Allows multiple instructors per run and multiple runs per instructor
model RunInstructor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  run         Run      @relation(fields: [runId], references: [id])
  runId       String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([userId, runId])
}

// Reward model: Represents available rewards for user participation
// Defines the reward details and requirements
model Reward {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  requirement Int
  userRewards UserReward[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// UserRun model: Manages the many-to-many relationship between users and runs
// Tracks user participation in runs
model UserRun {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  run       Run      @relation(fields: [runId], references: [id])
  runId     String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, runId])
}

// UserReward model: Manages the many-to-many relationship between users and rewards
// Tracks rewards earned by users
model UserReward {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, rewardId])
}

// Accounts will be if multiple providers are implemented, but for now it's only email & password
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  INSTRUCTOR
  USER
}
